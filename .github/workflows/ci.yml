name: oneDPL CI

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - release_oneDPL
      - main
      - 'release/**'

env:
  BUILD_CONCURRENCY: 2
  TEST_TIMEOUT_RELEASE: 360
  TEST_TIMEOUT_DEBUG: 1200
  ONETBB_LINUX_LINK: https://github.com/oneapi-src/oneTBB/releases/download/v2021.2.0/oneapi-tbb-2021.2.0-lin.tgz

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get clang-format
        run: sudo apt-get install -yqq clang-format-6.0
      - name: Applying clang-format for changed files
        run: |
          FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }} | grep ^include | grep -v nanorange\.hpp\$ || true)
          echo $FILES | xargs -n1 -t -r clang-format-6.0 --style=file -i
      - name: Creating diff
        run: git diff > clang-format-diff.diff
      - name: Checking if diff is empty
        run: if [ -s clang-format-diff.diff ]; then cat clang-format-diff.diff; exit 1; fi

  codespell:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        run: |
          sudo apt update && sudo apt install -y codespell
      - name: Run scan
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/codespell.sh $(pwd)

  documentation:
    runs-on: ubuntu-latest
    needs: [codespell]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install prerequisites
        run: |
          echo GITHUB_SHA_SHORT=${GITHUB_SHA::8} >> $GITHUB_ENV
          python -m pip install -r documentation/library_guide/requirements.txt
      - name: Build documentation
        run: |
          mkdir html
          sphinx-build -b html documentation/library_guide/ html/
      - name: Archive build directory
        uses: actions/upload-artifact@v1
        with:
            name: onedpl-html-docs-${{ env.GITHUB_SHA_SHORT }}
            path: html

  linux-host-testing:
    name: ${{ matrix.os }}_${{ matrix.cxx_compiler }}_cxx${{ matrix.std }}_${{ matrix.build_type }}
    runs-on: ['${{ matrix.os }}']
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            cxx_compiler: g++
            std: 17
            build_type: release
    steps:
      - uses: actions/checkout@v2
      - name: Get oneTBB
        run: |
          wget ${ONETBB_LINUX_LINK}
          tar xf oneapi*
      - name: Run testing
        shell: bash
        run: |
          set -x
          source oneapi*/env/vars.sh intel64
          if [[ "${{ matrix.build_type }}" == "debug" ]]; then
            TEST_TIMEOUT=${TEST_TIMEOUT_DEBUG}
          else
            TEST_TIMEOUT=${TEST_TIMEOUT_RELEASE}
          fi
          mkdir build && cd build
          cmake -DCMAKE_CXX_STANDARD=${{ matrix.std }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} -DONEDPL_BACKEND=tbb -DONEDPL_DEVICE_TYPE=HOST ..
          make VERBOSE=1 -j${BUILD_CONCURRENCY}
          ctest --timeout ${TEST_TIMEOUT} --output-on-failure
