IntelÂ® oneAPI DPC++ Library (oneDPL) Release Notes (Beta)
##########################################################

Overview
========

Learn more about the new features and known issues for this library.

New in 2021.1-beta09
====================

New Features
-----------------------------
- Added the Range-based versions of following algorithms: ``for_each``, ``copy``, ``transform``,
  ``find``, ``find_if``, ``find_if_not``, ``find_end``, ``find_first_of``, ``search``, ``is_sorted``,
  ``is_sorted_until``, ``reduce``, ``transform_reduce``, ``min_element``, ``max_element``, ``minmax_element``,
  ``exclusive_scan``, ``inclusive_scan``, ``transform_exclusive_scan``, ``transform_inclusive_scan``.
  These algorithms are declared in ``oneapi::dpl::experimental::ranges`` namespace and implemented only for DPC++ policies.
  In order to make these algorithm available the ``<oneapi/dpl/ranges>`` header should be included.
  Use of the range-based API requires C++17 and the C++ standard libraries coming with GCC 8.1 (or higher) or Clang 7 (or higher).

Changes to Existing Features
-----------------------------
- Changed the order of template parameters for ``transform_iterator`` so the source iterator type is provided first (e.g., ``transform_iterator<Iterator, UnaryFunctor>``).
- Improved performance of the following algorithms: ``copy_if``, ``exclusive_scan``, ``inclusive_scan``, ``partition_copy``, ``remove_copy``, ``remove_copy_if``, ``transform_exclusive_scan``, ``transform_inclusive_scan`` using DPC++ policies.
- Improved performance of the ``sort`` and ``stable_sort`` algorithms when arithmetic data types and ``std::less``, ``std::greater`` comparators are used.
- Tested Standard C++ APIs are added to namespace ``oneapi::std`` and ``oneapi::dpl``. In order to use Tested Standard C++ APIs via ``oneapi::std`` or ``oneapi::dpl``, corresponding headers in ``<oneapi/dpl/...>`` must be included (e.g., ``#include <oneapi/dpl/utility>``).


Fixed Issues
-------------
- Fixed an error when local memory usage is out of limit.
- Eliminated warnings about ``std::result_of`` deprecation compiling with C++17 on Windows.

Known Issues
-------------
- The ``using namespace oneapi;`` directive in a oneDPL program code may result in compilation errors
  with some compilers including GCC 7 and earlier. Instead of this directive, use fully qualified
  names or namespace aliases.
- The conversion from ``zip_iterator::value_type`` to ``std::tuple`` may produce incorrect result.
- On the DPC++ CPU device, RNG sequences produced by ``discard_block_engine`` may deviate
  from those generated by other implementations of the engine.
- The ``sort``, ``stable_sort``, ``partial_sort``, ``partial_sort_copy`` algorithms
  may work incorrectly on CPU device.
- The ``sort``, ``stable_sort``, ``partial_sort_copy`` are prone to ``Floating point exception`` and ``CL_INVALID_WORK_GROUP_SIZE`` errors
  on GPU with DPC++ L0 backend, when arithmetic data types and ``std::less``, ``std::greater`` or no comparators are used. The errors can be avoided
  by setting ``_PSTL_COMPILE_KERNEL`` macro to ``0``.
- Some algorithms with a DPC++ policy may fail on CPU or on FPGA emulator.
- ``std::tuple``, ``std::pair`` cannot be used with SYCL buffers to transfer data between host and device.
- When used within DPC++ kernels or transferred to/from a device, ``std::array`` can only hold objects whose type meets DPC++ requirements for use in kernels
  and for data transfer, respectively.
- ``std::array::at`` member function cannot be used in kernels because it may throw an exception;
  use ``std::array::operator[]`` instead.
- ``std::array`` member function swap cannot be used in DPC++ kernels on Windows* platform.
- ``std::swap`` for ``std::array`` cannot work in DPC++ kernels on Windows platform.
- Not all functions in <cmath> are supported currently, please refer to DPC++ library guide for detail list.
- Due to specifics of Microsoft* Visual C++ implementation, some standard math functions for float
  (including: ``std::ldexp``, ``std::frexp``, ``std::sqrt(std::complex<float>)``) require device support
  for double precision.
