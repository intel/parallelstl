// -*- C++ -*-
//===-- numeric -----------------------------------------------------------===//
//
// Copyright (C) Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This file incorporates work covered by the following copyright and permission
// notice:
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
//
//===----------------------------------------------------------------------===//

#ifndef _ONEDPL_NUMERIC
#define _ONEDPL_NUMERIC

// Workarounds for libstdc++9, libstdc++10 when new TBB version is found in the environment
#if __cplusplus >= 201703L
#    if __has_include(<tbb/version.h>)
#        ifndef PSTL_USE_PARALLEL_POLICIES
#            define PSTL_USE_PARALLEL_POLICIES (_GLIBCXX_RELEASE != 9)
#        endif
#        ifndef _GLIBCXX_USE_TBB_PAR_BACKEND
#            define _GLIBCXX_USE_TBB_PAR_BACKEND (_GLIBCXX_RELEASE > 10)
#        endif
#    endif // __has_include(<tbb/version.h>)
#endif     // __cplusplus >= 201703L

// ATTENTION!!! Include the header from the C++ standard library before the oneDPL config header to see whether the _PSTL_VERSION macro is defined
#include <limits>
#include <numeric>
#include <type_traits>
#include "oneapi/dpl/pstl/onedpl_config.h"

#if !_ONEDPL_NUMERIC_FORWARD_DECLARED
// If not declared, pull in forward declarations
#    include "oneapi/dpl/pstl/glue_numeric_defs.h"
#    define _ONEDPL_NUMERIC_FORWARD_DECLARED 1
#endif

#if _ONEDPL_EXECUTION_POLICIES_DEFINED
// If <execution> has already been included, pull in implementations
#    include "oneapi/dpl/pstl/glue_numeric_impl.h"
#endif

namespace oneapi
{
namespace dpl
{
using ::std::accumulate;
using ::std::inner_product;
using ::std::iota;
using ::std::partial_sum;

#if __cplusplus > 201402L
template <typename _Result, typename _Source, bool _IsSigned = ::std::is_signed<_Source>::value>
struct __ct_abs;

template <typename _Result, typename _Source>
struct __ct_abs<_Result, _Source, true>
{
    constexpr _Result
    operator()(_Source __t) const noexcept
    {
        if (__t >= 0)
            return __t;
        if (__t == ::std::numeric_limits<_Source>::min())
            return -static_cast<_Result>(__t);
        return -__t;
    }
};

template <typename _Result, typename _Source>
struct __ct_abs<_Result, _Source, false>
{
    constexpr _Result
    operator()(_Source __t) const noexcept
    {
        return __t;
    }
};

template <typename _Mn, typename _Nn>
constexpr ::std::common_type_t<_Mn, _Nn>
gcd(_Mn __m, _Nn __n)
{
    static_assert((::std::is_integral<_Mn>::value && ::std::is_integral<_Nn>::value),
                  "Arguments to gcd must be integer types");
    static_assert((!::std::is_same<typename ::std::remove_cv<_Mn>::type, bool>::value),
                  "First argument to gcd cannot be bool");
    static_assert((!::std::is_same<typename ::std::remove_cv<_Nn>::type, bool>::value),
                  "Second argument to gcd cannot be bool");
    using _Rp = ::std::common_type_t<_Mn, _Nn>;
    using _Wp = ::std::make_unsigned_t<_Rp>;
    _Wp __m1 = static_cast<_Wp>(__ct_abs<_Rp, _Mn>()(__m));
    _Wp __n1 = static_cast<_Wp>(__ct_abs<_Rp, _Nn>()(__n));
    _Wp __t;
    while (__n1 != 0)
    {
        __t = __m1 % __n1;
        __m1 = __n1;
        __n1 = __t;
    }
    return static_cast<_Rp>(__m1);
}

template <typename _Mn, typename _Nn>
constexpr ::std::common_type_t<_Mn, _Nn>
lcm(_Mn __m, _Nn __n)
{
    static_assert((::std::is_integral<_Mn>::value && ::std::is_integral<_Nn>::value),
                  "Arguments to gcd must be integer types");
    static_assert((!::std::is_same<typename ::std::remove_cv<_Mn>::type, bool>::value),
                  "First argument to gcd cannot be bool");
    static_assert((!::std::is_same<typename ::std::remove_cv<_Nn>::type, bool>::value),
                  "Second argument to gcd cannot be bool");
    if (__m == 0 || __n == 0)
        return 0;
    using _Rp = ::std::common_type_t<_Mn, _Nn>;
    _Rp __val1 = __ct_abs<_Rp, _Mn>()(__m) / gcd(__m, __n);
    _Rp __val2 = __ct_abs<_Rp, _Nn>()(__n);
    return __val1 * __val2;
}
#endif

} // namespace dpl

} // namespace oneapi

namespace dpl = oneapi::dpl;

namespace std
{
using oneapi::dpl::adjacent_difference;
using oneapi::dpl::exclusive_scan;
using oneapi::dpl::inclusive_scan;
using oneapi::dpl::reduce;
using oneapi::dpl::transform_exclusive_scan;
using oneapi::dpl::transform_inclusive_scan;
using oneapi::dpl::transform_reduce;
} // namespace std

#endif /* _ONEDPL_NUMERIC */
