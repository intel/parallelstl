// -*- C++ -*-
//===-- iterator ----------------------------------------------------------===//
//
// Copyright (C) Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This file incorporates work covered by the following copyright and permission
// notice:
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
//
//===----------------------------------------------------------------------===//

#ifndef _ONEDPL_ITERATOR
#define _ONEDPL_ITERATOR

// Workarounds for libstdc++9, libstdc++10 when new TBB version is found in the environment
#if __cplusplus >= 201703L
#    if __has_include(<tbb/version.h>)
#        ifndef PSTL_USE_PARALLEL_POLICIES
#            define PSTL_USE_PARALLEL_POLICIES (_GLIBCXX_RELEASE != 9)
#        endif
#        ifndef _GLIBCXX_USE_TBB_PAR_BACKEND
#            define _GLIBCXX_USE_TBB_PAR_BACKEND (_GLIBCXX_RELEASE > 10)
#        endif
#    endif // __has_include(<tbb/version.h>)
#endif     // __cplusplus >= 201703L

#include <iterator>
#include "oneapi/dpl/pstl/onedpl_config.h"
#if _ONEDPL_BACKEND_SYCL
#    include "oneapi/dpl/pstl/hetero/dpcpp/sycl_iterator.h"
#endif

#include "oneapi/dpl/pstl/iterator_impl.h"

#include "oneapi/dpl/internal/iterator_impl.h"

namespace oneapi
{
namespace dpl
{
using ::std::advance;
using ::std::begin;
using ::std::bidirectional_iterator_tag;
#if __cplusplus > 201103L
using ::std::cbegin;
using ::std::cend;
using ::std::crbegin;
using ::std::crend;
using ::std::make_reverse_iterator;
using ::std::rbegin;
using ::std::rend;
#endif
using ::std::distance;
#if __cplusplus > 201402L
using ::std::empty;
using ::std::size;
#endif
using ::std::end;
using ::std::forward_iterator_tag;
using ::std::input_iterator_tag;
using ::std::iterator;
using ::std::iterator_traits;
using ::std::make_move_iterator;
using ::std::move_iterator;
using ::std::next;
using ::std::output_iterator_tag;
using ::std::prev;
using ::std::random_access_iterator_tag;
using ::std::reverse_iterator;
} // namespace dpl
} // namespace oneapi
namespace dpl = oneapi::dpl;

#endif /* _ONEDPL_ITERATOR */
