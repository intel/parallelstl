// -*- C++ -*-
//===-- iterator ----------------------------------------------------------===//
//
// Copyright (C) 2017-2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// This file incorporates work covered by the following copyright and permission
// notice:
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
//
//===----------------------------------------------------------------------===//

#ifndef _PSTL_iterator
#define _PSTL_iterator

#include <iterator>
#if _PSTL_BACKEND_SYCL
#    include "oneapi/dpl/pstl/hetero/dpcpp/sycl_iterator.h"
#endif

#include "oneapi/dpl/pstl/iterator_impl.h"

#include "oneapi/dpl/internal/iterator_impl.h"

namespace oneapi
{
namespace std
{
using ::std::advance;
using ::std::begin;
using ::std::bidirectional_iterator_tag;
#if __cplusplus > 201103L
using ::std::cbegin;
using ::std::cend;
using ::std::crbegin;
using ::std::crend;
using ::std::make_reverse_iterator;
using ::std::rbegin;
using ::std::rend;
#endif
using ::std::distance;
#if __cplusplus > 201402L
using ::std::empty;
using ::std::size;
#endif
using ::std::end;
using ::std::forward_iterator_tag;
using ::std::input_iterator_tag;
using ::std::iterator;
using ::std::iterator_traits;
using ::std::make_move_iterator;
using ::std::move_iterator;
using ::std::next;
using ::std::output_iterator_tag;
using ::std::prev;
using ::std::random_access_iterator_tag;
using ::std::reverse_iterator;
} // namespace std

namespace dpl
{
using namespace oneapi::std;
}
} // namespace oneapi
namespace dpl = oneapi::dpl;

#endif /* _PSTL_iterator */
